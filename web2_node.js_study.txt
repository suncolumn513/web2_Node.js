- 새로운 컴퓨터언어를 배우지 않고도 웹페이지를 자동으로 생성하는 서버쪽 애플리케이션을 만들 수 있게 하고 싶어졌다.
= server side application
-> 노드 js라는 새로운 도구(기술) 추출
- 자바스크립트가 웹브라우저를 제어하는 것이었다면, 노드js는 자바스크립트를 이용해서 웹브라우저가 아닌 컴퓨터 자체를 제어하는 것이다.
= 자바스크립트를 이용해서 웹페이지를 자동으로 생성하는 web application을 만들고 싶어졌다.

- node.js가 적용된 코드 이용
: 단 하나의 파일 template.js에 들어있는 html 코드만 바꿔도 모든 것이 바뀌어 적용된다.
-> 모든 웹페이지를 저장한 것이 아니라, 사용자가 어떤 페이지를 요청할때마다 노드 js와 같은 기술로 순간순간에 웹페이지를 프로그래밍적으로 생성해내기 때문에 가능한 것이다.
-> 웹사이트에 방문하는 사용자에게 컨텐츠에 대한 읽기, 쓰기, 수정, 삭제의 작업을 모두 웹을 통해서 할 수 있도록 제공이 가능하다.

- web browser위에 돌아가는 webapplication(website, webpage)를 만든다.
-> 웹브라우저가 가지고 있는 여러가지 기능들 중에서(제목표시, 목록표시 등) 우리가 만들고자하는 웹애플리케이션에 필요한 기능을 어떤 컴퓨터언어의 문법에 따라서 html이라고 하는 컴퓨터언어의 문법에 따라 호출함으로써 웹애플리케이션을 만드는 것이다.
-> node.js도 마찬가지다.

: 인터넷을 통해서 노드 js 홈페이지에 간다. 거기서 어떤 프로그램을 다운받아서 설치할 것인데, 그 프로그램은 node.js runtime이라고 부른다.
- node.js runtime이라는 프로그램에서 마치 웹브라우저처럼 자바스크립트라는 컴퓨터언어를 통해 node.js runtime이 가지고 있는 여러가지 기능 중에서 우리가 필요한 것들을 호출하는 것을 통해 우리는 node.js application을 만들 수 있는 것이다.
-> node.js runtime을 각 운영체제에 설치하여, 자바스크립트라는 컴퓨터언어를 통해서 node.js runtime을 실행시키는 것으로 우리가 만들고자 하는 노드js application을 어떻게 만들게 되는 것인가를 공부하자.

- 자주 사용되는 코드는 따로 파일로 저장하여 node.js가 실행하도록 할 수 있다.
-> cmd 창에서 node <파일명> 치면 js파일이 실행된다.
C:\Users\huiji\Desktop\WEB\web2\node.js>main.js
* node.js 경로로 이동해서 항상 실행해야 한다.

- 웹브라우저, 웹서버가 있으면 웹브라우저에 주소를 입력해 요청하면 웹서버는 그 요청에 따른 정보를 찾아 응답해 주는 관계를 갖고 있다.
-> 지금까지 배운 아파치 웹서버와 같이 웹서버로도 사용할 수 있다.
localhost:3000을 실행해보면 웹서버가 제대로 작동한다.
-> ctrl+c를 하면 웹서버가 꺼져서 웹서버에 접속할 수 없게 된다.
* 프로그래밍 적으로 사용자에게 전송할 데이터를 생성하는 것이 아파치 웹서버는 할 수 없는 node.js, php, 파이썬의 장고 등이 갖고 있는 힘이다.

- template literal : 여러줄로 이루어진 문자열의 표현과 문자의 치환을 쉽게 할 수 있는 기능을 제공한다.
-> `(~문자 밑에 있는 것)이 시작과 끝을 나타낸다.
-> ${}안에 식 또는 변수를 넣어 표현할 수 있다.
-> 줄바꿈할때 \n을 안써도 되고 엔터쳐도 된다.

- URL
ex) http:// opentutorials.org:3000/main?id=HTML&page=12
-> http = protocol : 사용자가 서버에 접속할 때 어떤 방식으로 통신할 것인지의 통신 규칙
-> opentutorials = host(domain) : 어떤 특정한 인터넷에 접속되어 있는 각각의 컴퓨터
-> 3000 = port : 한대의 컴퓨터 안에 여러대의 서버가 있을 수 있다. 그러면 클라이언트가 접속했을 때 어느 서버와 통신할지 애매하다. 따라서 해당 포트에 연결되어 접속한다.
* 80은 웹서버의 디폴트 값
-> main = path : 컴퓨터안에 어떤 디렉토리에 어떤 파일인지를 가리킴
-> id=HTML&page=12 = query string : 물음표로 시작하고 값과 값은 &로 연결, 값의 이름과 값은 =로 구분
* 쿼리스트링에 따라 다른 정보를 보여주게 된다.
-> request.url의 값을 추출함으로써 node.js로부터 원하는 값을 얻어낼 수 있다.
-> node.js에서 url을 분석한다 = parse
-> querystring이 어디에 있는지 알아야한다.
* 노드js가 갖고 있는 수많은 기능들을 비슷한 것끼리 그룹핑한 것 = 모듈
-> 사용자가 접속한 url에 따라서 파일들을 읽어준다.
-> 쿼리 스트링에 따라 다른 정보를 출력
ex) http://localhost:3000/?id=html
ex) http://localhost:3000/?id=css
* 정보를 다이나믹하게 프로그래밍적으로 생성
* main.js의 정보만 변경해도 전체의 모든 페이지에 적용이 가능해지는 폭발적인 효과를 가져온다.

- 정보시스템의 핵심적인 메커니즘 = CRUD
: create, read, update, delete
-> 정보를 다루는 핵심적인 처리 방법 4가지

C:\Users\huiji\Desktop\WEB\web2\node.js>node nodejs/fileread.js
-> 상위 디렉토리 node.js에서 노드가 실행되었다.
-> 그래서 여기서 실행하면 이 디렉토리에 있는 sample.txt를 찾게 되는데 없다.
-> C:\Users\huiji\Desktop\WEB\web2\node.js>cd nodejs

C:\Users\huiji\Desktop\WEB\web2\node.js\nodejs>node fileread.js
* dir/w -> 현재 디렉토리에 있는 파일들의 목록을 보여준다.

- 파일을 이용해 본문 구현
`data/${queryData.id}` : 쿼리스트링에 의해 파일명 생성
- 페이지가 열릴 때마다 파일의 내용(데이터)을 읽어오기 때문에 node.js를 껐다 키지 않아도 자동으로 반영(리로드)된다.

- 프로그램은 input과 output으로 이루어진다.
var args = process.argv;
console.log(args[2]);
-> args[2] 부터 사용자의 입력값을 배열의 값으로 갖는다.

- pathname = '/'인 것은 페이지마다 특별한 경로가 붙어있지 않기 때문에,
pathname을 통해서는 홈과 각각의 페이지를 구분할 수 없다.
-> 반복문을 중첩하여 구분가능
: query string 존재여부로 구분

- 빈번한 리스트의 수정을 노드js를 통해 할 수 있는 방법
-> fs.readdir(testFolder, function(error, filelist){
  console.log(filelist);
})
-> 결과 : C:\Users\huiji\Desktop\WEB\web2\node.js>node nodejs/readdir.js
[ 'CSS', 'HTML', 'JavaScript' ]

* function의 중괄호 안에 있는 코드를 실행하도록 되어있다. -> filelist가 해당 디렉토리 안에 있는 값으로 구성되어야한다.

- data에 새로운 파일을 추가하게 되면 저절로 리스트가 만들어지는 것을 볼 수 있다.

- 함수 정의 방법
: function f123(){
 console.log(1);
 console.log(2);
 console.log(3);
}
- Math.round(1.6) -> 객체.함수 (자바스크립트가 내장하고 있는 것)

- synchronous(동기) : 일이 처리되면서 그 일이 오랫동안 처리되어야하는 경우에도 기다렸다가 그 다음 일을 처리하는 것
- asynchronous(비동기) : 병렬적으로 동시에 여러가지 일을 처리하는 것. 효율적이지만 복잡하다.
 -> node.js는 비동기적 처리를 하기 위한 좋은 기능들을 가지고 있다.
 -> readFileSync vs. readFile(비동기)
- function(err, result){
    console.log(result);
} : callback
 -> readFile의 세번째 인자로 이용
  : result에는 파일의 내용을 인자로서 공급해준다.

C:\Users\huiji\Desktop\WEB\web2\node.js>node syntax/sync.js
: syntax 파일 밖에서 sync.js 파일 실행하는 방법

- 콜백 : 파일을 읽은 다음에 나중에 함수를 호출하는 것을 통해서 나를 불러.(나중에 전화해)
- javascript에서는 함수가 값이다.

- 패키지 : 소프트웨어를 부르는 것 중 하나, 독립적으로 실행되는 프로그램, 부프로그램
- 타인의 모듈을 이용해서 소프트웨어를 만들게 되는데, 이때 사용하는 모듈이 많아지면 여러가지 복잡한 문제가 생겨난다. 이를 관리하는 도구가 패키지 매니저다.
- 대표적인 패키지 매니저: NPM
 : 파일이 수정되는지 관찰하고 있다가 파일이 수정되면 자동으로 프로그램을 껐다가 다시 켜서 수정할때마다 껐다 키는 불편함을 제거할 수 있다.
 -> node.js 설치되면서 자동으로 설치됨
- 실행중인 Node.js 애플리케이션을 관리하는 프로세스 매니저: PM2
 -> NPM을 이용하여 PM2 설치
: https://pm2.keymetrics.io/ 참고하여 설치하기
-> http://localhost:3000/ 열기
-> pm2 log 명령어 실행 : 에러표시해줌
* pm2 start main.js --watch = 실행
* pm2 stop main = 중지

- form 태그는 그 폼 안에 있는 각각의 컨트롤들의 사용자가 입력한 정보를 submit했을때, action 속성이 가리키는 서버로 쿼리 스트링의 형태 데이터를 전송하는 html 기능이다.
- 데이터를 전송할 때 주소의 데이터가 포함되어있다면 그 주소를 무심코 카피해서 누군가에게 보냈을  그사람이 그것을 클릭해 들어오면 우리 서버에 있는 정보가 수정되거나 생성되거나 삭제될 수 있다.
 -> 서버에서 데이터를 가져올때는 ?~에 해당하는 쿼리스트링을 사용하고, 서버에 데이터를 생성하거나 수정하거나 삭제하는 것과 같은 수정행위를 할때에는 필요한 데이터를 url로 보내면 안된다.
  -> 눈에 보이지 않는 방식ㅇ로 보내야한다.
  -> method="post" // 쿼리스트링이 url에 포함되지 않는다.(기본은 method="get")

- 배열은 순서에 따라, 객체는 순서에 상관없이 정리정돈하는 도구이다.
-> var members = ['egoing', 'k8805', 'hoya'];
 console.log(members[1]);
-> var roles = {
 'programmer':'egoing',
 'designer':'k8005',
 'manager':'hoya'
}
 console.log(roles.designer);
  console.log(roles['designer']);
- 함수 자체도 값이 될 수 있다.
 -> 배열의 원소, 객체의 원소로써 존재가능하다.

- request.on('data', function(data){
      body = body + data;
  });
: 포스트 방식으로 전송되는 데이터가 많을 경우를 대비하여 제공 -> 조각조각 서버쪽에서 수신할때마다 콜백함수 호출. 호출할때마다 데이터 인자를 통해 수신한 정보를 준다.
* pase 함수를 통해 객체화하여 정보를 받아낸다.

- response.writeHead(302, {Location: `/?id=${title}`});
: 리다이렉션

- 사용자에게 UI 최소화하기
- 삭제버튼을 링크로 만들면 특정 페이지 주소로 이동하기 때문에 form으로 만들어서 post 방식으로 보내야 한다.

- 많은 객체들을 정리할 수 있는 도구 = 모듈
- module.exports = M;
// 이 문장을 쓰고 있는 모듈이 담겨있는 js 파일에 있는 여러 기능들 중에 M이 가리키는 객체를 이 모듈 밖에서도 쓸 수 있도록 exports하겠다는 의미
- require('./mpart.js') // 모듈을 가져오기
