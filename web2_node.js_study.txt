- 새로운 컴퓨터언어를 배우지 않고도 웹페이지를 자동으로 생성하는 서버쪽 애플리케이션을 만들 수 있게 하고 싶어졌다.
= server side application
-> 노드 js라는 새로운 도구(기술) 추출
- 자바스크립트가 웹브라우저를 제어하는 것이었다면, 노드js는 자바스크립트를 이용해서 웹브라우저가 아닌 컴퓨터 자체를 제어하는 것이다.
= 자바스크립트를 이용해서 웹페이지를 자동으로 생성하는 web application을 만들고 싶어졌다.

- node.js가 적용된 코드 이용
: 단 하나의 파일 template.js에 들어있는 html 코드만 바꿔도 모든 것이 바뀌어 적용된다.
-> 모든 웹페이지를 저장한 것이 아니라, 사용자가 어떤 페이지를 요청할때마다 노드 js와 같은 기술로 순간순간에 웹페이지를 프로그래밍적으로 생성해내기 때문에 가능한 것이다.
-> 웹사이트에 방문하는 사용자에게 컨텐츠에 대한 읽기, 쓰기, 수정, 삭제의 작업을 모두 웹을 통해서 할 수 있도록 제공이 가능하다.

- web browser위에 돌아가는 webapplication(website, webpage)를 만든다.
-> 웹브라우저가 가지고 있는 여러가지 기능들 중에서(제목표시, 목록표시 등) 우리가 만들고자하는 웹애플리케이션에 필요한 기능을 어떤 컴퓨터언어의 문법에 따라서 html이라고 하는 컴퓨터언어의 문법에 따라 호출함으로써 웹애플리케이션을 만드는 것이다.
-> node.js도 마찬가지다.

: 인터넷을 통해서 노드 js 홈페이지에 간다. 거기서 어떤 프로그램을 다운받아서 설치할 것인데, 그 프로그램은 node.js runtime이라고 부른다.
- node.js runtime이라는 프로그램에서 마치 웹브라우저처럼 자바스크립트라는 컴퓨터언어를 통해 node.js runtime이 가지고 있는 여러가지 기능 중에서 우리가 필요한 것들을 호출하는 것을 통해 우리는 node.js application을 만들 수 있는 것이다.
-> node.js runtime을 각 운영체제에 설치하여, 자바스크립트라는 컴퓨터언어를 통해서 node.js runtime을 실행시키는 것으로 우리가 만들고자 하는 노드js application을 어떻게 만들게 되는 것인가를 공부하자.

- 자주 사용되는 코드는 따로 파일로 저장하여 node.js가 실행하도록 할 수 있다.
-> cmd 창에서 node <파일명> 치면 js파일이 실행된다.
C:\Users\huiji\Desktop\WEB\web2\node.js>main.js
* node.js 경로로 이동해서 항상 실행해야 한다.

- 웹브라우저, 웹서버가 있으면 웹브라우저에 주소를 입력해 요청하면 웹서버는 그 요청에 따른 정보를 찾아 응답해 주는 관계를 갖고 있다.
-> 지금까지 배운 아파치 웹서버와 같이 웹서버로도 사용할 수 있다.
localhost:3000을 실행해보면 웹서버가 제대로 작동한다.
-> ctrl+c를 하면 웹서버가 꺼져서 웹서버에 접속할 수 없게 된다.
* 프로그래밍 적으로 사용자에게 전송할 데이터를 생성하는 것이 아파치 웹서버는 할 수 없는 node.js, php, 파이썬의 장고 등이 갖고 있는 힘이다.

- template literal : 여러줄로 이루어진 문자열의 표현과 문자의 치환을 쉽게 할 수 있는 기능을 제공한다.
-> `(~문자 밑에 있는 것)이 시작과 끝을 나타낸다.
-> ${}안에 식 또는 변수를 넣어 표현할 수 있다.
-> 줄바꿈할때 \n을 안써도 되고 엔터쳐도 된다.

- URL
ex) http:// opentutorials.org:3000/main?id=HTML&page=12
-> http = protocol : 사용자가 서버에 접속할 때 어떤 방식으로 통신할 것인지의 통신 규칙
-> opentutorials = host(domain) : 어떤 특정한 인터넷에 접속되어 있는 각각의 컴퓨터
-> 3000 = port : 한대의 컴퓨터 안에 여러대의 서버가 있을 수 있다. 그러면 클라이언트가 접속했을 때 어느 서버와 통신할지 애매하다. 따라서 해당 포트에 연결되어 접속한다.
* 80은 웹서버의 디폴트 값
-> main = path : 컴퓨터안에 어떤 디렉토리에 어떤 파일인지를 가리킴
-> id=HTML&page=12 = query string : 물음표로 시작하고 값과 값은 &로 연결, 값의 이름과 값은 =로 구분
* 쿼리스트링에 따라 다른 정보를 보여주게 된다.
-> request.url의 값을 추출함으로써 node.js로부터 원하는 값을 얻어낼 수 있다.
-> node.js에서 url을 분석한다 = parse
-> querystring이 어디에 있는지 알아야한다.
* 노드js가 갖고 있는 수많은 기능들을 비슷한 것끼리 그룹핑한 것 = 모듈
-> 사용자가 접속한 url에 따라서 파일들을 읽어준다.
-> 쿼리 스트링에 따라 다른 정보를 출력
ex) http://localhost:3000/?id=html
ex) http://localhost:3000/?id=css
* 정보를 다이나믹하게 프로그래밍적으로 생성
* main.js의 정보만 변경해도 전체의 모든 페이지에 적용이 가능해지는 폭발적인 효과를 가져온다.

- 정보시스템의 핵심적인 메커니즘 = CRUD
: create, read, update, delete
-> 정보를 다루는 핵심적인 처리 방법 4가지

C:\Users\huiji\Desktop\WEB\web2\node.js>node nodejs/fileread.js
-> 상위 디렉토리 node.js에서 노드가 실행되었다.
-> 그래서 여기서 실행하면 이 디렉토리에 있는 sample.txt를 찾게 되는데 없다.
-> C:\Users\huiji\Desktop\WEB\web2\node.js>cd nodejs

C:\Users\huiji\Desktop\WEB\web2\node.js\nodejs>node fileread.js
* dir/w -> 현재 디렉토리에 있는 파일들의 목록을 보여준다.

- 파일을 이용해 본문 구현
`data/${queryData.id}` : 쿼리스트링에 의해 파일명 생성
- 페이지가 열릴 때마다 파일의 내용(데이터)을 읽어오기 때문에 node.js를 껐다 키지 않아도 자동으로 반영(리로드)된다.

- 프로그램은 input과 output으로 이루어진다.
var args = process.argv;
console.log(args[2]);
-> args[2] 부터 사용자의 입력값을 배열의 값으로 갖는다.
